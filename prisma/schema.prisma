generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth.js required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Your existing models with added relations for NextAuth
model User {
  id         String    @id @default(cuid())
  email      String    @unique
  name       String?
  password   String?   // for credentials auth
  image      String?   // for OAuth providers
  emailVerified DateTime? // for email verification
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  
  // NextAuth relations
  accounts   Account[]
  sessions   Session[]
  
  // Your existing relations
  profile    Profile?
  resumes    AIResume[]
}

model PasswordReset {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  pin       String
  expiresAt DateTime
  verified  Boolean  @default(false)
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  @@index([email])
  @@index([token])
  @@index([pin])
}

model Profile {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @unique
  headline     String?  // short summary
  bio          String?  // longer description
  location     String?
  linkedinUrl  String?
  githubUrl    String?
  portfolioUrl String?
  skills       Skill[]
  workExperience WorkExperience[]
  education    Education[]
  updatedAt    DateTime @updatedAt
}

model Skill {
  id         String   @id @default(cuid())
  profile    Profile  @relation(fields: [profileId], references: [id])
  profileId  String
  name       String
  proficiency Int?     // optional: 1-5 scale
  years      Float?    // optional years of experience
}

model WorkExperience {
  id          String   @id @default(cuid())
  profile     Profile  @relation(fields: [profileId], references: [id])
  profileId   String
  title       String
  company     String
  startDate   DateTime
  endDate     DateTime?
  description String?
  currentlyWorking Boolean @default(false)
}

model Education {
  id          String   @id @default(cuid())
  profile     Profile  @relation(fields: [profileId], references: [id])
  profileId   String
  institution String
  degree      String
  fieldOfStudy String?
  startDate   DateTime
  endDate     DateTime?
  grade       String?
}

model AIResume {
  id             String       @id @default(cuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  jobTitle       String?
  jobDescription String?
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  version        Int          @default(1)
  analyses       AIAnalysis[] // reverse relation for convenience
}

model AIAnalysis {
  id          String    @id @default(cuid())
  resumeId    String
  resume      AIResume  @relation(fields: [resumeId], references: [id])
  score       Int?
  strengths   String?
  weaknesses  String?
  suggestions String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}